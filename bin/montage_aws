#!/usr/bin/env ruby
require 'montage_aws'
require 'yaml'
require 'aws'

CONFIG_FILE="#{ENV['HOME']}/.montage_aws.yml"

include MontageAWS

def print_usage
  $stderr.puts <<-eos
   montage_aws command [options]

   Commands:
     setup - connects to amazon and setup SWF
     compute x y h w [-machines 2] - schedules montage job
     setup_infrastructure  - starts decider and provider on ec2 instance
     start_worker - starts worker
     start_decider - starts decider
     start_provider - starts provider

   Options:
     -h - prints this help
     -f - run as a daemon
  eos
end

default_config = {
    :domain => "montage_aws",
    :workflow_name => "mock_computation",
    :workflow_version => "0.0.1",
    :default_task_list => "computation-task-list",
}

config = File.exists?(CONFIG_FILE) ? YAML.load(File.open(CONFIG_FILE)) : default_config
AWS.config(config[:aws])

activities = {
    :provision => StartEC2Worker,
    :project => Project,
    :merge => Merge,
    :terminate_instances => TerminateEc2Instances
}

spec = {
    :setup => Provision,
    :compute => Compute,
    :setup_infrastructure => StartEC2DeciderAndProvider,
    :start_decider => Decider,
    :start_provider => EC2Provider,
    :start_worker => Worker,
}

params = {
    :config => config,
    :swf => AWS::SimpleWorkflow.new,
    :ec2 => AWS::EC2.new,
    :s3 => AWS::S3.new,
    :montage => Montage.new,
    :logger => $stderr
}

activity_fac = ActivityFactory.new activities, params
task_fac = CmdFactory.new(activity_fac, spec, params)

begin
  cmd = Cmd.new ARGV
  if cmd.options[:h]
    print_usage
    exit 0
  else
    task = task_fac.create_from_cmd cmd
    task.execute_cmd
  end
rescue RuntimeError => e
  $stderr.puts "error: #{e.message}"
  print_usage
end
